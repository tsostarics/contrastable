% Generated by roxygen2: do not edit by hand
% Please edit documentation in R/decompose_contrasts.R
\name{decompose_contrasts}
\alias{decompose_contrasts}
\title{Decompose contrasts into new columns}
\usage{
decompose_contrasts(
  model_data,
  extract_from,
  extract_to = NULL,
  which_contrasts = NULL,
  extract_intercept = FALSE,
  remove_original = FALSE,
  retain_factor_name = TRUE
)
}
\arguments{
\item{model_data}{Dataframe with factor columns}

\item{extract_from}{Character vector of column names to extract contrasts from}

\item{extract_to}{Optional names to give the new columns, must equal number of
extracted components.}

\item{which_contrasts}{Optional named list of which columns to extract.
The names of the list should match some or all of the values in \code{extract_from}
if used. The values should be integer vectors corresponding to the
column indices to extract.}

\item{extract_intercept}{Logical, whether to extract the intercept column from
each contrast. Default \code{FALSE} since this is typically dropped since it's
all 1s.}

\item{remove_original}{Logical, whether to remove the original factor column
after decomposing into separate columns. Default \code{FALSE}.}

\item{retain_factor_name}{Either a logical value or a character vector of
which factor names should have their original variable name prepended to the
extracted components. Default \code{TRUE} will prepend the factor name to all
extracted components. \code{FALSE} will not prepend the factor name to any
extracted components. A character vector will prepend the factor name to
only the factors specified in the vector. Note that \code{FALSE} will only affect
columns that are extracted with \code{extract_to} set. If \code{extract_to} is not set,
then the factor name will still be prepended to the extracted components, as
this is the default behavior of \code{model.matrix()}.}
}
\value{
model_data but with new columns corresponding to the numeric coding
of the given factor's contrasts
}
\description{
Given a dataframe with factor columns, this function will extract the contrasts
from the factor column and place them inside new columns. This is useful for
cases where you want to work with the numeric values of the contrasts. For
a pedagogical example, you can explicitly show how factor variables are
transformed into numeric values. For a practical example, you're typically
allowed n-1 contrasts for n levels of a factor. If you don't want to use all
of the contrasts, you can extract the ones you want and use them in your
model. This is sometimes used with polynomial contrasts when you don't want
to use higher order polynomials.
}
\examples{

# Decomose contrasts for carb and gear columns into new columns, using
# the contrast labels used when setting the contrasts
mtcars |>
set_contrasts(carb ~ scaled_sum_code,
              gear ~ contr.sum | c("4-mean", "5-mean")) |>
  decompose_contrasts(c('carb', 'gear'))

# Decompose contrasts, but set new labels for gear using extract_to,
# and don't prepend 'gear' to these new columns. Note that this isn't
# recommended in practice since you'll need to escape the column names with
# backticks when using them.
mtcars |>
  set_contrasts(carb ~ scaled_sum_code,
                gear ~ contr.sum) |>
  decompose_contrasts(c('carb', 'gear'),
                      extract_to = list(gear = c("4-mean", "5-mean")),
                      retain_factor_name = FALSE)


}
